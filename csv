#!/usr/bin/env python3

import argparse

from csv_defaults import *
from csv_sort import ColumnType, callback_sort
from csv_show import callback_show
from csv_regex import callback_regex


def setup_parser(parser):
    '''Declares CLI parameters of the script'''
    subparsers = parser.add_subparsers(title="Chose operation to perform")

    file_params = argparse.ArgumentParser(add_help=False)
    file_params.add_argument("-d", "--delimiter", action="store", type=str, default=DEFAULT_TABLE_DELIMITER,
                             help="Delimiter, which separates columns in the file")
    file_params.add_argument("-f", "--files", nargs="+", action="store",
                             help="Files with table data on which we want to perform an operation")
    file_params.add_argument("--no_header", action=DEFAULT_NO_HEADER_ACTION,
                             help="If set table will be considered as the one without header.")

    column_selector = argparse.ArgumentParser(add_help=False)
    column_selector.add_argument("-cn", "--c_name", action="append",
                                 default=DEFAULT_COLUMN_NAME_LIST, type=str,
                                 help="Column name on which we want to perform an operation")
    column_selector.add_argument("-ci", "--c_index", action="append", type=int,
                                 default=DEFAULT_COLUMN_INDEX_LIST,
                                 help="Column index on which we want to perform an operation, starts from 0.")

    inplace_argument = argparse.ArgumentParser(add_help=False)
    inplace_argument.add_argument("-i", "--inplace", action=DEFAULT_INPLACE_ACTION,
                                  help="If set the operation will be performed inplace")

    sort_parser = subparsers.add_parser("sort", parents=[file_params, column_selector, inplace_argument],
                                        help="Allows to sort rows according to data in certain columns",
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sort_parser.add_argument("-as", "--c_type", action="append",
                             default=DEFAULT_COLUMN_TYPE_LIST,
                             choices=[el.value for el in ColumnType],
                             help="Sets type of the values in the chosen column. "
                             "If nothing is set all column values will be interpreted as numbers")
    sort_parser.add_argument("-t_fmt", "--time_fmt", action="store", default=DEFAULT_TIME_FORMAT,
                             help="time string format which will be used in order to parse time values")
    sort_parser.add_argument("-r", "--reverse", action=DEFAULT_SORT_REVERSE_ACTION,
                             help="If set sorting order will be reversed - the first element will be the largest one.")
    sort_parser.set_defaults(callback=callback_sort)

    show_parser = subparsers.add_parser("show", parents=[file_params, column_selector],
                                        help="Allows to selectively show table content",
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    show_parser.add_argument("--r_head", action="store", type=int, default=DEFAULT_SHOW_ROW_HEAD_NUMBER,
                             help="Will display given number of top rows in the table. Value is normalzied to the row number.")
    show_parser.add_argument("--r_tail", action="store", type=int, default=DEFAULT_SHOW_ROW_TAIL_NUMBER,
                             help="Will display given number of bottom rows in the table. Value is normalized to the row number.")
    show_parser.add_argument("--c_head", action="store", type=int, default=DEFAULT_SHOW_COL_HEAD_NUMBER,
                             help="Will display given number of the first columns in the table. Value is normalized to the column number.")
    show_parser.add_argument("--c_tail", action="store", type=int, default=DEFAULT_SHOW_COL_TAIL_NUMBER,
                             help="Will display given number of the last columns in the table. Value is normalized to the column number.")
    show_parser.add_argument("--from_row", "-fr", action="append", type=int,
                             default=DEFAULT_SHOW_FROM_ROW,
                             help="Will display all rows between the given row index and the next 'to_row' number. "
                                  "The given row index is included into the displayed range. "
                                  "Note that header, if present, is not taken into account in row counting."
                                  "Row numeration starts from 0.")
    show_parser.add_argument("--to_row", "-tr", action="append", type=int,
                             default=DEFAULT_SHOW_TO_ROW,
                             help="Will display all rows between the previously set `from_row` index and the given one. "
                                  "The given row index is NOT included into the displayed range."
                                  "Note that header, if present, is not taken into account in row counting."
                                  "Row numeration starts from 0.")
    show_parser.add_argument("--from_col", "-fc", action="append", type=int,
                             default=DEFAULT_SHOW_FROM_COL,
                             help="Will display all columns between the given column index andthe one defined by the next 'to_col' value."
                                  "The given col index is included into the displayed range. "
                                  "Column numeration starts from 0.")
    show_parser.add_argument("--to_col", "-tc", action="append", type=int,
                             default=DEFAULT_SHOW_TO_COL,
                             help="Will deilsplay all columns between the previously set `from_col` index and the given one. "
                                  "The given column index is NOT included into the displayed range. "
                                  "Column numeration starts from 0.")
    show_parser.add_argument("--r_index", "-ri", action="append", type=int,
                             default=DEFAULT_SHOW_ROW_INDEX,
                             help="Exact index of row which will be displayed. "
                                  "Index numeration starts from 0 and does not "
                                  "take into account header if it is present.")
    show_parser.add_argument("--hide_header", action=DEFAULT_SHOW_HIDE_HEADER_ACTION,
                             help="If set, header will not be displayed even if it is present in the table."
                                  "Note that in order to hide the header user still need to mark "
                                  "that the table contains one.")
    show_parser.add_argument("--except", dest="except_flag", action=DEFAULT_SHOW_EXCEPT_ACTION,
                             help="If set then showing utility will desplay all table rows and columns except those defined by arguments above.")

    show_parser.set_defaults(callback=callback_show)

    regex_parser = subparsers.add_parser("regex", parents=[file_params, column_selector, inplace_argument],
                                         help="Allows to select rows from the table by checking given "
                                         "regular expressions in specified columns",
                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    regex_parser.add_argument("-e", "--expression", action="append", type=str,
                              default=DEFAULT_REGEX_EXPRESSION,
                              help="Defines a regular expression which will be used for values in the previously stated column."
                                   "Note that each cell content is considered as separate string when it is matched to the regex.")
    regex_parser.add_argument("--ignore_case", action=DEFAULT_REGEX_IGNORE_CASE_ACTION,
                              help="If set letter case will be ignored during regex matching.")
    regex_parser.set_defaults(callback=callback_regex)


def main():
    parser = argparse.ArgumentParser(prog="Table",
                                     description="Script for performing different operations on the csv table",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    setup_parser(parser)
    arguments = parser.parse_args()
    arguments.callback(arguments)


if __name__ == "__main__":
    main()
